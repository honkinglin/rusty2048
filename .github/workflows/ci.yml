name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  FONTCONFIG_NO_PKG_CONFIG: "1"
  RUST_FONTCONFIG_DLOPEN: "1"
  PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: "1"
  PKG_CONFIG_ALLOW_SYSTEM_LIBS: "1"

jobs:
  # 检查代码格式和lint
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install system deps (safe baseline)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libfontconfig1-dev libfreetype6-dev fontconfig
          
          # Verify fontconfig installation
          pkg-config --exists fontconfig && echo "FontConfig found"
          pkg-config --libs --cflags fontconfig || echo "FontConfig pkg-config failed"
          
          # Set pkg-config path
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: |
          cargo fmt -p rusty2048-core -- --check
          cargo fmt -p rusty2048-shared -- --check
          cargo fmt -p rusty2048-cli -- --check
          cargo fmt -p rusty2048-web -- --check
      
      - name: Run clippy
        run: |
          cargo clippy -p rusty2048-core --all-targets --all-features -- -D warnings
          cargo clippy -p rusty2048-shared --all-targets --all-features -- -D warnings
          cargo clippy -p rusty2048-cli --all-targets --all-features -- -D warnings
          # 关键：web 用 wasm 目标避免 fontconfig
          cargo clippy -p rusty2048-web --target wasm32-unknown-unknown -- -D warnings

  # 测试所有项目
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install system deps (safe baseline)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libfontconfig1-dev libfreetype6-dev fontconfig
          
          # Verify fontconfig installation
          pkg-config --exists fontconfig && echo "FontConfig found"
          pkg-config --libs --cflags fontconfig || echo "FontConfig pkg-config failed"
          
          # Set pkg-config path
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: |
          cargo test -p rusty2048-core
          cargo test -p rusty2048-shared
          cargo test -p rusty2048-cli
          # web 包不跑原生单测，改为 wasm 目标的类型检查
          cargo check -p rusty2048-web --target wasm32-unknown-unknown

  # 构建核心项目（排除desktop）
  build:
    name: Build Core Projects
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build CLI
        env:
          FONTCONFIG_NO_PKG_CONFIG: "1"
          RUST_FONTCONFIG_DLOPEN: "1"
        run: cargo build --release -p rusty2048-cli
      
      - name: Build Core
        env:
          FONTCONFIG_NO_PKG_CONFIG: "1"
          RUST_FONTCONFIG_DLOPEN: "1"
        run: cargo build --release -p rusty2048-core
      
      - name: Build Shared
        env:
          FONTCONFIG_NO_PKG_CONFIG: "1"
          RUST_FONTCONFIG_DLOPEN: "1"
        run: cargo build --release -p rusty2048-shared

  # 构建Web版本
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            web/node_modules
          key: ${{ runner.os }}-web-${{ hashFiles('**/Cargo.lock', 'web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-web-
      
      - name: Install npm dependencies
        working-directory: web
        run: npm ci
      
      - name: Build WASM
        working-directory: web
        env:
          FONTCONFIG_NO_PKG_CONFIG: "1"
          RUST_FONTCONFIG_DLOPEN: "1"
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: "1"
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: "1"
        run: |
          # Ensure we're building for WASM target
          wasm-pack build --target web --out-dir public/pkg -- --target wasm32-unknown-unknown
      
      - name: Build Web app
        working-directory: web
        run: npm run build

  # 构建Desktop版本
  build-desktop:
    name: Build Desktop
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config
          
          # Try to install WebKit2GTK 4.1 first, fallback to 4.0 if not available
          if sudo apt-get install -y libwebkit2gtk-4.1-dev; then
            echo "WebKit2GTK 4.1 installed successfully"
          else
            echo "WebKit2GTK 4.1 not available, trying 4.0..."
            sudo apt-get install -y libwebkit2gtk-4.0-dev
          fi
          
          # Other GTK deps（精简 fontconfig 重复包）
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libfontconfig1-dev \
            libglib2.0-dev \
            libgirepository1.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libfreetype6-dev
          
          pkg-config --exists gtk+-3.0 && echo "GTK+ 3.0 found"
          pkg-config --exists fontconfig && echo "FontConfig found"
          if pkg-config --exists webkit2gtk-4.1; then
            echo "WebKit2GTK 4.1 found"
          elif pkg-config --exists webkit2gtk-4.0; then
            echo "WebKit2GTK 4.0 found"
          else
            echo "WebKit2GTK not found - this may cause build issues"
            exit 1
          fi
          
          echo "FontConfig pkg-config info:"
          pkg-config --libs --cflags fontconfig || echo "FontConfig pkg-config failed"
          
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "FONTCONFIG_PATH=/etc/fonts" >> $GITHUB_ENV
      
      - name: Install Tauri CLI
        run: cargo install tauri-cli
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build Desktop
        working-directory: desktop
        env:
          CI: "true"
        run: cargo tauri build --ci

  # 跨平台构建测试（仅 CLI，不触发 fontconfig）
  build-cross-platform:
    name: Build Cross Platform
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
      
      - name: Build CLI for target
        env:
          FONTCONFIG_NO_PKG_CONFIG: "1"
          RUST_FONTCONFIG_DLOPEN: "1"
        run: cargo build --release -p rusty2048-cli --target ${{ matrix.target }}
